//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Samples/XR Interaction Toolkit/2.3.1/XR Device Simulator/Controles.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controles: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controles()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controles"",
    ""maps"": [
        {
            ""name"": ""Acciones"",
            ""id"": ""34e7b466-f330-45fe-91e1-c34bc67ddb45"",
            ""actions"": [
                {
                    ""name"": ""AvanzaPlato"",
                    ""type"": ""Button"",
                    ""id"": ""f40273e7-bb1f-411e-89e9-cff5f3657e9f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RetrocedePlato"",
                    ""type"": ""Button"",
                    ""id"": ""d9c0fb97-e8ec-483b-add1-3adc2d5ffb72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""73dbb2a4-4a11-4496-a1d9-0ba4aaf82ede"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AvanzaPlato"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""524ce8cd-59f1-420f-b230-1cbec135b1cc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RetrocedePlato"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Acciones
        m_Acciones = asset.FindActionMap("Acciones", throwIfNotFound: true);
        m_Acciones_AvanzaPlato = m_Acciones.FindAction("AvanzaPlato", throwIfNotFound: true);
        m_Acciones_RetrocedePlato = m_Acciones.FindAction("RetrocedePlato", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Acciones
    private readonly InputActionMap m_Acciones;
    private List<IAccionesActions> m_AccionesActionsCallbackInterfaces = new List<IAccionesActions>();
    private readonly InputAction m_Acciones_AvanzaPlato;
    private readonly InputAction m_Acciones_RetrocedePlato;
    public struct AccionesActions
    {
        private @Controles m_Wrapper;
        public AccionesActions(@Controles wrapper) { m_Wrapper = wrapper; }
        public InputAction @AvanzaPlato => m_Wrapper.m_Acciones_AvanzaPlato;
        public InputAction @RetrocedePlato => m_Wrapper.m_Acciones_RetrocedePlato;
        public InputActionMap Get() { return m_Wrapper.m_Acciones; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AccionesActions set) { return set.Get(); }
        public void AddCallbacks(IAccionesActions instance)
        {
            if (instance == null || m_Wrapper.m_AccionesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AccionesActionsCallbackInterfaces.Add(instance);
            @AvanzaPlato.started += instance.OnAvanzaPlato;
            @AvanzaPlato.performed += instance.OnAvanzaPlato;
            @AvanzaPlato.canceled += instance.OnAvanzaPlato;
            @RetrocedePlato.started += instance.OnRetrocedePlato;
            @RetrocedePlato.performed += instance.OnRetrocedePlato;
            @RetrocedePlato.canceled += instance.OnRetrocedePlato;
        }

        private void UnregisterCallbacks(IAccionesActions instance)
        {
            @AvanzaPlato.started -= instance.OnAvanzaPlato;
            @AvanzaPlato.performed -= instance.OnAvanzaPlato;
            @AvanzaPlato.canceled -= instance.OnAvanzaPlato;
            @RetrocedePlato.started -= instance.OnRetrocedePlato;
            @RetrocedePlato.performed -= instance.OnRetrocedePlato;
            @RetrocedePlato.canceled -= instance.OnRetrocedePlato;
        }

        public void RemoveCallbacks(IAccionesActions instance)
        {
            if (m_Wrapper.m_AccionesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAccionesActions instance)
        {
            foreach (var item in m_Wrapper.m_AccionesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AccionesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AccionesActions @Acciones => new AccionesActions(this);
    public interface IAccionesActions
    {
        void OnAvanzaPlato(InputAction.CallbackContext context);
        void OnRetrocedePlato(InputAction.CallbackContext context);
    }
}
